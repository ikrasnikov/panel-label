$button-default-theme: dark;
$button-alternative-themes: darker dark-70 dark-70-light light primary primary-light danger success warning;

$button-theme-colors: (
  dark: $color-dark-50,
  darker: $color-dark,
  dark-70: $color-dark-70,
  dark-70-light: $color-dark-70,
  light: rgba(white, 0.8),
  primary: $color-bg-primary,
  primary-light: $color-bg-primary,
  danger: $color-bg-danger,
  success: $color-bg-success,
  warning: $color-bg-warning,
);

$button-theme-backgrounds: (
  dark: transparent,
  darker: transparent,
  dark-70: transparent,
  dark-70-light: rgba($color-bg-primary, 0.1),
  light: transparent,
  primary: transparent,
  primary-light: rgba($color-bg-primary, 0.1),
  danger: transparent,
  success: transparent,
  warning: transparent,
);

$button-theme-overlays: (
  dark: $color-dark-50,
  darker: $color-dark,
  dark-70: $color-dark-70,
  dark-70-light: $color-dark-70,
  light: white,
  primary: $color-bg-primary,
  primary-light: rgba($color-bg-primary, 0.1),
  danger: $color-bg-danger,
  success: $color-bg-success,
  warning: $color-bg-warning,
);

button.mdc-button {
  @extend %layout-inline;
  height: 42px !important;
  padding: 10px 42px !important;
  justify-content: center !important;
}

.mat-mdc-button {
  &:not(:disabled):hover {
    & > .mat-button-focus-overlay {
      opacity: 1;
    }
  }

  // default theme
  &:not(:disabled) {
    color: map-get($button-theme-colors, $button-default-theme) !important;
  }

  &:disabled {
    color: rgba(map-get($button-theme-colors, $button-default-theme), 0.3) !important;
  }

  &:not(:disabled) > .mat-button-focus-overlay {
    background-color: rgba(map-get($button-theme-overlays, $button-default-theme), 0.12) !important;
  }

  &:not(:disabled) .mat-ripple-element {
    background-color: rgba(map-get($button-theme-overlays, $button-default-theme), 0.2) !important;
  }
}

@each $theme-name in $button-alternative-themes {
  .mat-mdc-button[theme="#{$theme-name}"] {
    &:not(:disabled) {
      color: map-get($button-theme-colors, $theme-name) !important;
      background-color: map-get($button-theme-backgrounds, $theme-name) !important;
    }

    &:disabled {
      color: rgba(map-get($button-theme-colors, $theme-name), 0.3) !important;
    }

    &:not(:disabled) > .mat-button-focus-overlay {
      background-color: rgba(map-get($button-theme-overlays, $theme-name), 0.12) !important;
    }

    &:not(:disabled) .mat-ripple-element {
      background-color: rgba(map-get($button-theme-overlays, $theme-name), 0.2) !important;
    }

    & .icon-container {
      color: white;
      background-color: map-get($button-theme-colors, $theme-name) !important;
    }
  }
}

.mdc-button__label {
  display: flex;
  align-items: center;
  font-weight: $font-weight-bold;

  & .material-symbols-outlined {
    font-size: $font-size-x-large;
    margin-right: 8px;
  }
}

button.mdc-button.vertical-button {
  padding: 12px 0 !important;
  width: 84px;
  height: auto !important;

  & .icon-container {
    padding: 3px 5px;
    margin: 0;

    & .material-symbols-outlined {
      font-size: $font-size-xxx-large;
    }
  }
}

button.mdc-button .icon-container {
  display: inline-block;
  border-radius: 10px;
  margin-right: 12px;
  padding: 1px 3px;

  & .material-symbols-outlined {
    font-size: $font-size-x-large;
    margin-right: 0;
  }
}